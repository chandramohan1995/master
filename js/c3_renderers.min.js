(function() {
    var t;
    (t = function(t) {
        return "object" == typeof exports && "object" == typeof module ? t(require("jquery"), require("c3"),require("plotly.js")) : "function" == typeof define && define.amd ? define(["jquery", "c3","plotly.js"], t) : t(jQuery, c3)
    })(function(t, e) {
        var o, n;
        return o = function(o, n, l) {
            return null == o && (o = {}), null == n && (n = {}), null == l && (l = !1),
                function(r, i) {
                    var a, s, h, u, g, p, y, d, c, f, v, m, w, b, j, x;
                    if (p = {
                            localeStrings: {
                                vs: "vs",
                                by: "by"
                            },
                            plotly: {},
                            plotlyConfig: {}
                        }, i = t.extend(!0, {}, p, i), w = r.getRowKeys(), a = r.getColKeys(), 0 === (x = l ? a : w).length && x.push([]), 0 === (g = l ? w : a).length && g.push([]), y = r.aggregatorName, r.valAttrs.length && (y += "(" + r.valAttrs.join(", ") + ")"), u = x.map(function(e) {
                            var n, i, a, s, h, u, p;
                            for (h = [], i = [], u = 0, p = g.length; u < p; u++) n = g[u], s = parseFloat(r.getAggregator(l ? n : e, l ? e : n).value()), h.push(isFinite(s) ? s : null), i.push(n.join("-") || " ");
                            return a = {
                                name: e.join("-") || y
                            }, "pie" === o.type ? (a.values = h, a.labels = i.length > 1 ? i : [y]) : (a.x = l ? h : i, a.y = l ? i : h), t.extend(a, o)
                        }), l ? (c = r.rowAttrs.join("-"), d = r.colAttrs.join("-")) : (c = r.colAttrs.join("-"), d = r.rowAttrs.join("-")), j = y, "" !== c && (j += " " + i.localeStrings.vs + " " + c), "" !== d && (j += " " + i.localeStrings.by + " " + d), v = {
                            title: j,
                            hovermode: "closest",
                            width: window.innerWidth / 1.4,
                            height: window.innerHeight / 1.4 - 50
                        }, "pie" === o.type) {
                        for (f in s = Math.ceil(Math.sqrt(u.length)), b = Math.ceil(u.length / s), v.grid = {
                                columns: s,
                                rows: b
                            }, u)(h = u[f]).domain = {
                            row: Math.floor(f / s),
                            column: f - s * Math.floor(f / s)
                        }, u.length > 1 && (h.title = h.name);
                        1 === u[0].labels.length && (v.showlegend = !1)
                    } else v.xaxis = {
                        title: l ? y : null,
                        automargin: !0
                    }, v.yaxis = {
                        title: l ? null : y,
                        automargin: !0
                    };
                    return m = t("<div>").appendTo(t("body")), e.newPlot(m[0], u, t.extend(v, n, i.plotly), i.plotlyConfig), m.detach()
                }
        }, n = function() {
            return function(o, n) {
                var l, r, i, a, s, h, u, g, p, y, d, c, f, v;
                for (a = {
                        localeStrings: {
                            vs: "vs",
                            by: "by"
                        },
                        plotly: {},
                        plotlyConfig: {}
                    }, n = t.extend(!0, {}, a, n), 0 === (p = o.getRowKeys()).length && p.push([]), 0 === (r = o.getColKeys()).length && r.push([]), i = {
                        x: [],
                        y: [],
                        text: [],
                        type: "scatter",
                        mode: "markers"
                    }, d = 0, f = p.length; d < f; d++)
                    for (g = p[d], c = 0, v = r.length; c < v; c++) l = r[c], null != (y = o.getAggregator(g, l).value()) && (i.x.push(l.join("-")), i.y.push(g.join("-")), i.text.push(y));
                return s = {
                    title: o.rowAttrs.join("-") + " vs " + o.colAttrs.join("-"),
                    hovermode: "closest",
                    xaxis: {
                        title: o.colAttrs.join("-"),
                        automargin: !0
                    },
                    yaxis: {
                        title: o.rowAttrs.join("-"),
                        automargin: !0
                    },
                    width: window.innerWidth / 1.5,
                    height: window.innerHeight / 1.4 - 50
                }, h = t("<div>", {
                    style: "display:none;"
                }).appendTo(t("body")), u = t("<div>").appendTo(h), e.newPlot(u[0], [i], t.extend(s, n.plotly), n.plotlyConfig), u.detach(), h.remove(), u
            }
        }, t.pivotUtilities.c3_renderers = {
            "Horizontal Bar Chart": o({
                type: "bar",
                orientation: "h"
            }, {
                barmode: "group"
            }, !0),
            "Horizontal Stacked Bar Chart": o({
                type: "bar",
                orientation: "h"
            }, {
                barmode: "relative"
            }, !0),
            "Bar Chart": o({
                type: "bar"
            }, {
                barmode: "group"
            }),
            "Stacked Bar Chart": o({
                type: "bar"
            }, {
                barmode: "relative"
            }),
            "Line Chart": o(),
            "Area Chart": o({
                stackgroup: 1
            }),
            "Scatter Chart": n(),
            "Multiple Pie Chart": o({
                type: "pie",
                scalegroup: 1,
                hoverinfo: "label+value",
                textinfo: "none"
            }, {}, !0)
        }
    })
}).call(this);
//# sourceMappingURL=c3_renderers.min.js.map
